<?xml version="1.0"?>
<project name="Source Documentation with Doxygen" default="gen-doxygen">

	<!-- ant-contrib library must be in build server's $ANT_HOME/lib directory -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<property environment="env" />

	<!-- Document Code with Doxygen
	
	The executable "doxygen" is required to be on the system path. On Mac OS X, usually only command shells (bash, csh, etc.) set
	the PATH system environment variable. In Eclipse, you can use the launch configuration manager to ensure that PATH is defined
	correctly.
	
	When running this from an Ensemble-style Eclipse workspace (with feature and plugin projects), the Base Directory is expected
	to be set to the root of the source tree. In Eclipse, you can set the Base Directory in the launch configuration to
	${workspace_loc}.
	
	The Details
	
	In Bamboo, as in deployed Eclipse applications, the structure is like this:
	
	${basedir}/
		features/
		plugins/
			Feature1/
			FeatureN/
			Plugin1/
			PluginN/ ${output.dir}
				<doxygen.properties> (<doxygen.cfg>)
				<doxygen.zip>
		
	In Eclipse, the features and plugins are flattened:
	
	${basedir}/
		Feature1/
		FeatureN/
		Plugin1/
		PluginN/ ${output.dir}
			<doxygen.properties> (<doxygen.cfg>)
			<doxygen.zip>
	
	The script searches ${basedir} for Doxygen properties files, converts them to Doxygen configuration files, then runs Doxygen
	with those configuration settings. Although Doxygen configuration files are not exactly the same format as Java properties
	files, they're close enough. Because Doxygen resolves relative pathnames according to the execution directory, which can be
	hard to resolve, we write only absolute pathnames to the Doxygen configuration files. To accommodate the use of absolute
	pathnames, we define doxygen.basedir.  
	-->

	<property name="doxygen.executable" value="doxygen" description="doxygen executable" />
	<property name="doxygen.properties.name" value="doxygen.properties" description="search for file with this name" />
	<property name="doxygen.cfg.name" value="doxygen.cfg" description="name of the doxygen configuration file" />

	<path id="cfg-files" description="doxygen property files used to drive doxygen generation">
		<fileset dir="${basedir}">
			<patternset>
				<include name="**/${doxygen.properties.name}" />
			</patternset>
		</fileset>
	</path>

	<patternset id="generated-doxygen" description="ephemeral files generated by doxygen">
		<include name="html/**/*" />
	</patternset>

	<!-- Private Area Follows -->

	<target name="gen-doxygen" depends="clean">

		<for param="file" description="run Doxygen wherever we find a Doxygen properties file">
			<path refid="cfg-files" />
			<sequential>
				<dirname file="@{file}" property="output.dir" />
				<property name="doxygen.cfg.file" location="${output.dir}${file.separator}${doxygen.cfg.name}" />

				<if description="account for the difference in structure between an Eclipse workspace and Bamboo build directory">
					<isset property="env.BAMBOO_BUILD_KEY" />
					<then>
						<!-- <property name="input.dir" location="${output.dir}${file.separator}..${file.separator}.." /> -->
						<property name="input.dir" location="${output.dir}${file.separator}.." description="only searches plugins" />
					</then>
					<else>
						<property name="input.dir" location="${output.dir}${file.separator}.." />
					</else>
				</if>

				<copy overwrite="true" file="@{file}" tofile="${doxygen.cfg.file}" description="replace tokens in Doxygen property file with build values">
					<filterset>
						<!-- the $quot; is included because Doxygen cfg files aren't strictly Java properties files -->
						<filter token="OUTPUT" value="${output.dir}" />
						<filter token="INPUT" value="${input.dir}" />
						<filter token="BUILD_KEY" value="${env.BAMBOO_BUILD_KEY}" />
						<filter token="BUILD_NUM" value="${env.BAMBOO_BUILD_NUMBER}" />
						<!-- <filter token="REVISION_NUM" value="${env.BAMBOO_SUBVERSION_REVISION}" /> -->
					</filterset>
				</copy>
				<echo>Running Doxygen on ${doxygen.cfg.file}</echo>
				<exec executable="${doxygen.executable}" dir="${output.dir}">
					<arg value="${doxygen.cfg.file}" />
				</exec>

				<!-- zipping the generated doxygen files into target dir makes organizing Bamboo artifacts easier -->
				<!--
				<zip destfile="${output.dir}.zip">
					<zipfileset dir="${output.dir}" />
				</zip>
				<move file="${output.dir}.zip" todir="${output.dir}" />
				-->

			</sequential>
		</for>

	</target>

	<target name="clean" description="remove the doxygen-generated files">
		<pathconvert property="cfg.files" pathsep="${line.separator}" refid="cfg-files" />
		<for param="file" description="run Doxygen wherever we find a Doxygen properties file">
			<path refid="cfg-files" />
			<sequential>
				<dirname file="@{file}" property="output.dir" />
				<echo>Cleaning ${output.dir}</echo>
				<delete includeemptydirs="true">
					<fileset dir="${output.dir}">
						<patternset refid="generated-doxygen" />
					</fileset>
				</delete>
			</sequential>
		</for>
	</target>

</project>
