/*******************************************************************************
 * Copyright 2014 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package gov.nasa.ensemble.core.plan.resources.member.provider;

import gov.nasa.ensemble.core.plan.resources.member.util.MemberAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MemberItemProviderAdapterFactory extends MemberAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MemberItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.Conditions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionsItemProvider conditionsItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.Conditions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionsAdapter() {
		if (conditionsItemProvider == null) {
			conditionsItemProvider = new ConditionsItemProvider(this);
		}

		return conditionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.Claim} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClaimItemProvider claimItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.Claim}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClaimAdapter() {
		if (claimItemProvider == null) {
			claimItemProvider = new ClaimItemProvider(this);
		}

		return claimItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.NamedCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedConditionItemProvider namedConditionItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.NamedCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedConditionAdapter() {
		if (namedConditionItemProvider == null) {
			namedConditionItemProvider = new NamedConditionItemProvider(this);
		}

		return namedConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.NumericResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericResourceItemProvider numericResourceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.NumericResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericResourceAdapter() {
		if (numericResourceItemProvider == null) {
			numericResourceItemProvider = new NumericResourceItemProvider(this);
		}

		return numericResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.PowerLoad} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerLoadItemProvider powerLoadItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.PowerLoad}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerLoadAdapter() {
		if (powerLoadItemProvider == null) {
			powerLoadItemProvider = new PowerLoadItemProvider(this);
		}

		return powerLoadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.ResourceConditionsMember} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceConditionsMemberItemProvider resourceConditionsMemberItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.ResourceConditionsMember}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceConditionsMemberAdapter() {
		if (resourceConditionsMemberItemProvider == null) {
			resourceConditionsMemberItemProvider = new ResourceConditionsMemberItemProvider(this);
		}

		return resourceConditionsMemberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.SharableResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharableResourceItemProvider sharableResourceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.SharableResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharableResourceAdapter() {
		if (sharableResourceItemProvider == null) {
			sharableResourceItemProvider = new SharableResourceItemProvider(this);
		}

		return sharableResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.StateResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateResourceItemProvider stateResourceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.StateResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateResourceAdapter() {
		if (stateResourceItemProvider == null) {
			stateResourceItemProvider = new StateResourceItemProvider(this);
		}

		return stateResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.nasa.ensemble.core.plan.resources.member.UndefinedResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UndefinedResourceItemProvider undefinedResourceItemProvider;

	/**
	 * This creates an adapter for a {@link gov.nasa.ensemble.core.plan.resources.member.UndefinedResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUndefinedResourceAdapter() {
		if (undefinedResourceItemProvider == null) {
			undefinedResourceItemProvider = new UndefinedResourceItemProvider(this);
		}

		return undefinedResourceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (conditionsItemProvider != null) conditionsItemProvider.dispose();
		if (claimItemProvider != null) claimItemProvider.dispose();
		if (namedConditionItemProvider != null) namedConditionItemProvider.dispose();
		if (numericResourceItemProvider != null) numericResourceItemProvider.dispose();
		if (powerLoadItemProvider != null) powerLoadItemProvider.dispose();
		if (resourceConditionsMemberItemProvider != null) resourceConditionsMemberItemProvider.dispose();
		if (sharableResourceItemProvider != null) sharableResourceItemProvider.dispose();
		if (stateResourceItemProvider != null) stateResourceItemProvider.dispose();
		if (undefinedResourceItemProvider != null) undefinedResourceItemProvider.dispose();
	}

}
