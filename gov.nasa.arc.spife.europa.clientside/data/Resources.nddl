///////////////////////////////////////////////////////////
// Defines a framework in Nddl for integration with EUROPA
// Resources.
// Author: Conor McGann
// Date: January, 2005
///////////////////////////////////////////////////////////

class Reservoir {
  float initialCapacity;
  float levelLimitMin;
  float levelLimitMax;
  float productionRateMax;
  float productionMax;
  float consumptionRateMax;
  float consumptionMax;

  predicate produce {
    //posfloat quantity;
    float quantity = [0.0 +inff];
  }

  predicate consume {
    //posfloat quantity;
    float quantity = [0.0 +inff];
  }

  Reservoir(float ic, float ll_min, float ll_max) {
    initialCapacity = ic;
    levelLimitMin = ll_min;
    levelLimitMax = ll_max;
    productionRateMax = +inff;
    productionMax = +inff;
    consumptionRateMax = +inff;
    consumptionMax = +inff;
  }

  Reservoir(float ic, float ll_min, float ll_max, float p_max, float c_max) {
    initialCapacity = ic;
    levelLimitMin = ll_min;
    levelLimitMax = ll_max;
    productionRateMax = +inff;
    productionMax = p_max;
    consumptionRateMax = +inff;
    consumptionMax = c_max;
  }

  Reservoir(float ic, float ll_min, float ll_max, float pr_max, float p_max,
            float cr_max, float c_max) {
    initialCapacity = ic;
    levelLimitMin = ll_min;
    levelLimitMax = ll_max;
    productionRateMax = pr_max;
    productionMax = p_max;
    consumptionRateMax = cr_max;
    consumptionMax = c_max;
  }

  Reservoir() { }
}

class Reusable {
  float capacity;
  float levelLimitMin;
  float consumptionMax;
  float consumptionRateMax;

  predicate uses {
    float quantity = [0.0 +inff];
  }

  Reusable(float c, float ll_min) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = +inff;
    consumptionRateMax = +inff;
  }

  Reusable(float c, float ll_min, float cr_max) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = +inff;
    consumptionRateMax = cr_max;
  }

  Reusable(float c, float ll_min, float c_max, float cr_max) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = c_max;
    consumptionRateMax = cr_max;
  }
}

class CBReusable {
  float capacity;
  float levelLimitMin;
  float consumptionMax;
  float consumptionRateMax;

  /*
  predicate uses {
    float quantity = [0.0 +inff];
  }
  */

  CBReusable(float c, float ll_min) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = +inff;
    consumptionRateMax = +inff;
  }

  CBReusable(float c, float ll_min, float cr_max) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = +inff;
    consumptionRateMax = cr_max;
  }

  CBReusable(float c, float ll_min, float c_max, float cr_max) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = c_max;
    consumptionRateMax = cr_max;
  }
}

class Unary {
  float consumptionMax;

  Unary() {
    consumptionMax = +inff;
  }

  Unary(float c_max) {
    consumptionMax = c_max;
  }
  predicate use {}
}

/**
 * A UnaryResource is a reusable, discrete, single-capacity resource
 * and is efficiently supported using a timeline rather than
 * independent consume and produce transactions.
 */
class UnaryResource extends Timeline {
 predicate uses{
  eq(state, ACTIVE);
 }
}
