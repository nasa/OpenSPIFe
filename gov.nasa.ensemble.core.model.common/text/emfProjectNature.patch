Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 85686)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -12,11 +12,12 @@
  gov.nasa.ensemble.core.model.common.resource,
  gov.nasa.ensemble.core.model.common.transactions,
  gov.nasa.ensemble.core.model.common.util
-Require-Bundle: org.eclipse.emf.ecore.xmi;visibility:=reexport,
- org.eclipse.emf.transaction;visibility:=reexport,
+Require-Bundle: gov.nasa.ensemble.common,
+ gov.nasa.ensemble.resources;bundle-version="1.0.0",
  org.eclipse.emf.compare;visibility:=reexport,
- org.eclipse.emf.compare.match;visibility:=reexport,
  org.eclipse.emf.compare.diff;visibility:=reexport,
- gov.nasa.ensemble.common,
- org.eclipse.emf.edit.ui
+ org.eclipse.emf.compare.match;visibility:=reexport,
+ org.eclipse.emf.ecore.xmi;visibility:=reexport,
+ org.eclipse.emf.edit.ui,
+ org.eclipse.emf.transaction;visibility:=reexport
 Bundle-ActivationPolicy: lazy
Index: plugin.xml
===================================================================
--- plugin.xml	(revision 85686)
+++ plugin.xml	(working copy)
@@ -16,6 +16,15 @@
       <IEnsemblePluginTest
             class="gov.nasa.ensemble.core.model.common.AllModelTests" />
    </extension>
+   <extension
+         id="emfNature"
+         point="org.eclipse.core.resources.natures">
+      <runtime>
+         <run
+               class="gov.nasa.ensemble.core.model.common.resource.EMFProjectNature">
+         </run>
+      </runtime>
+   </extension>
 
    <extension point="org.eclipse.emf.edit.itemProviderAdapterFactories">
       <factory
Index: tests/gov/nasa/ensemble/core/model/common/resource/TestEMFProjectNature.java
===================================================================
--- tests/gov/nasa/ensemble/core/model/common/resource/TestEMFProjectNature.java	(revision 0)
+++ tests/gov/nasa/ensemble/core/model/common/resource/TestEMFProjectNature.java	(revision 0)
@@ -0,0 +1,34 @@
+package gov.nasa.ensemble.core.model.common.resource;
+
+import gov.nasa.ensemble.core.model.common.resource.EMFProjectNature;
+
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.junit.Test;
+
+import junit.framework.TestCase;
+
+public class TestEMFProjectNature extends TestCase {
+
+	@Test
+	public void testEMFProjectNature() throws CoreException {
+		NullProgressMonitor monitor = new NullProgressMonitor();
+		IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject("testEMFProjectNatureProject");
+		if (!project.exists()) {
+			project.create(monitor);
+		}
+		if (!project.isOpen()) {
+			project.open(monitor);
+		}
+		assertFalse(project.hasNature(EMFProjectNature.ID));
+		assertNull(project.getNature(EMFProjectNature.ID));
+		assertNotNull(EMFProjectNature.getOrCreateNature(project));
+		assertTrue(project.hasNature(EMFProjectNature.ID));
+		assertNotNull(project.getNature(EMFProjectNature.ID));
+		project.delete(true, monitor);
+		assertFalse(project.exists());
+	}
+	
+}
Index: tests/gov/nasa/ensemble/core/model/common/AllModelTests.java
===================================================================
--- tests/gov/nasa/ensemble/core/model/common/AllModelTests.java	(revision 85686)
+++ tests/gov/nasa/ensemble/core/model/common/AllModelTests.java	(working copy)
@@ -1,6 +1,7 @@
 package gov.nasa.ensemble.core.model.common;
 
 import gov.nasa.ensemble.common.EnsembleJUnit4Suite;
+import gov.nasa.ensemble.core.model.common.resource.TestEMFProjectNature;
 import gov.nasa.ensemble.core.model.common.transactions.TestTransactionUtils;
 import gov.nasa.ensemble.core.model.common.util.TestModelUtil;
 
@@ -10,6 +11,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
 	TestModelUtil.class,
-	TestTransactionUtils.class
+	TestTransactionUtils.class,
+	TestEMFProjectNature.class
 })
 public class AllModelTests extends EnsembleJUnit4Suite {/**/}
Index: src/gov/nasa/ensemble/core/model/common/resource/EMFProjectNature.java
===================================================================
--- src/gov/nasa/ensemble/core/model/common/resource/EMFProjectNature.java	(revision 0)
+++ src/gov/nasa/ensemble/core/model/common/resource/EMFProjectNature.java	(revision 0)
@@ -0,0 +1,172 @@
+package gov.nasa.ensemble.core.model.common.resource;
+
+import gov.nasa.ensemble.common.logging.LogUtil;
+import gov.nasa.ensemble.core.model.common.util.ModelUtil;
+import gov.nasa.ensemble.resources.ResourceUtil;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IProjectNature;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IResourceChangeEvent;
+import org.eclipse.core.resources.IResourceChangeListener;
+import org.eclipse.core.resources.IResourceDelta;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.emf.common.util.URI;
+import org.eclipse.emf.ecore.resource.Resource;
+import org.eclipse.emf.ecore.resource.ResourceSet;
+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
+
+public class EMFProjectNature implements IProjectNature {
+
+	public static final String ID = "gov.nasa.ensemble.core.model.common.emfNature";
+	
+	private IProject project;
+	private final ResourceSet projectResourceSet = new ResourceSetImpl();
+
+	private static IResourceChangeListener listener = new Listener(); 
+	static {
+		ResourcesPlugin.getWorkspace().addResourceChangeListener(listener);
+	}
+	
+	public static EMFProjectNature getOrCreateNature(IProject project) {
+		try {
+			if (!project.hasNature(ID)) {
+				ResourceUtil.addNature(project, ID, new NullProgressMonitor());
+			}
+			return (EMFProjectNature) project.getNature(ID);
+		} catch (CoreException e) {
+			LogUtil.error(e);
+		}
+		return null;
+	}
+	
+	public ResourceSet getResourceSet() {
+		return projectResourceSet;
+	}
+	
+	/**
+	 * @throws CoreException  
+	 */
+	public void configure() throws CoreException {
+		LogUtil.debug("configure");
+	}
+
+	/**
+	 * @throws CoreException  
+	 */
+	public void deconfigure() throws CoreException {
+		LogUtil.debug("deconfigure");
+	}
+
+	public IProject getProject() {
+		return project;
+	}
+
+	public void setProject(IProject project) {
+		this.project = project;
+	}
+
+	/**
+	 * Determines if the {@link IResourceDelta} event is relevant
+	 * to this nature. This would be an ideal place for behavioral
+	 * extensions
+	 * 
+	 * @param delta to evaluate for relevance
+	 * @return true if the event is important
+	 */
+	private boolean isImportant(IResourceDelta delta) {
+		return true;
+	}
+	
+	public void handleResourceAdded(IResource iResource) {
+		// TODO Auto-generated method stub
+		
+	}
+	
+	public void handleResourceRemoved(IResource iResource) {
+		// TODO Auto-generated method stub
+		
+	}
+	
+	public void handleResourceChanged(IResource iResource, IResourceDelta delta) {
+		if (!(iResource instanceof IFile)) {
+			return;
+		}
+		URI uri = ModelUtil.getURI(iResource);
+		Resource resource = getResourceSet().getResource(uri, false);
+		if (resource == null || !resource.isLoaded()) {
+			LogUtil.debug("workspace resource change ignored due to unloaded state of EMF resource");
+			return;
+		}
+		//
+		// check the timestamp since the change could have been from the EMF resource itself 
+		long wsTimeStamp = iResource.getLocalTimeStamp();
+		long emfTimeStamp = resource.getTimeStamp();
+		if (wsTimeStamp < emfTimeStamp || wsTimeStamp == emfTimeStamp) {
+			LogUtil.debug("workspace resource change ignored due to timestamp more recent EMF timestamp");
+			return;
+		}
+	}
+	
+	private static class Listener implements IResourceChangeListener {
+
+		public void resourceChanged(IResourceChangeEvent event) {
+			resourceChanged(event.getDelta());
+		}
+		
+		private void resourceChanged(IResourceDelta delta) {
+			if (delta != null) {
+				processDelta(delta);
+				for (IResourceDelta child : delta.getAffectedChildren()) {
+					resourceChanged(child);
+				}
+			}
+		}
+
+		@SuppressWarnings("unchecked")
+		private void processDelta(IResourceDelta delta) {
+			EMFProjectNature nature = getEMFProjectNature(delta);
+			if (nature == null) {
+				return;
+			}
+			boolean important = nature.isImportant(delta);
+			if (!important) {
+				return;
+			}
+			
+			IResource iResource = delta.getResource();
+			int kind = delta.getKind();
+			switch (kind) {
+			case IResourceDelta.ADDED:
+				nature.handleResourceAdded(iResource);
+				break;
+			case IResourceDelta.REMOVED:
+				nature.handleResourceRemoved(iResource);
+				break;
+			case IResourceDelta.CHANGED:
+				nature.handleResourceChanged(iResource, delta);
+				break;
+			}
+		}
+
+		private EMFProjectNature getEMFProjectNature(IResourceDelta delta) {
+			IResource iResource = delta.getResource();
+			if (iResource != null) {
+				IProject project = iResource.getProject();
+				if (project != null) {
+					try {
+						return (EMFProjectNature) project.getNature(EMFProjectNature.ID);
+					} catch (CoreException e) {
+						LogUtil.error(e);
+					}
+				}
+			}
+			return null;
+		}
+		
+	}
+
+}
